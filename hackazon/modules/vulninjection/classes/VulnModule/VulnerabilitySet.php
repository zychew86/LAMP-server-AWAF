<?php
/**
 * Created by IntelliJ IDEA.
 * User: Nikolay Chervyakov 
 * Date: 26.11.2014
 * Time: 12:59
 */


namespace VulnModule;


use Symfony\Component\Validator\Mapping\ClassMetadata;
use VulnModule\DataType\ArrayObject;
use Symfony\Component\Validator\Constraints;

class VulnerabilitySet
{
    /**
     * @var Vulnerability[]|ArrayObject<Vulnerability>
     */
    protected $vulnerabilities;

    function __construct($vulnerabilities = [])
    {
        $this->vulnerabilities = new ArrayObject();
        $this->setVulnerabilities($vulnerabilities);
    }

    /**
     * @return array|ArrayObject<Vulnerability>|Vulnerability[]
     */
    public function getVulnerabilities()
    {
        return $this->vulnerabilities->getArrayCopy();
    }

    /**
     * @param array|ArrayObject<Vulnerability>|Vulnerability[] $vulnerabilities
     */
    public function setVulnerabilities($vulnerabilities)
    {
        if (!is_array($vulnerabilities) && !($vulnerabilities instanceof ArrayObject)) {
            throw new \InvalidArgumentException("Incorrect vulnerability set value");
        }

        $this->vulnerabilities = new ArrayObject();

        foreach ($vulnerabilities as $vulnerability) {
            $this->set($vulnerability);
        }
    }

    /**
     * @param Vulnerability|boolean $vulnerability
     * @param null $name
     */
    public function set($vulnerability, $name = null)
    {
        $this->vulnerabilities[$name ?: $vulnerability->getName()] = $vulnerability;
    }

    /**
     * @param $vulnName
     */
    public function disableVulnerability($vulnName)
    {
        $this->vulnerabilities[$vulnName] = null;
    }

    /**
     * @param $vulnName
     */
    public function inheritVulnerability($vulnName)
    {
        unset($this->vulnerabilities[$vulnName]);
    }

    public function clear()
    {
        $this->vulnerabilities->clear();
    }

    public function hasOwnVulnerability($name)
    {
        return array_key_exists($name, $this->vulnerabilities);
    }

    public function removeVulnerability($name)
    {
        if ($this->hasOwnVulnerability($name)) {
            unset($this->vulnerabilities[$name]);
        }
    }

    /**
     * @param $name
     * @return null|Vulnerability
     */
    public function get($name)
    {
        return $this->vulnerabilities[$name];
    }

    public static function loadValidatorMetadata(ClassMetadata $metadata)
    {
    }
}