<?php
/**
 * Created by IntelliJ IDEA.
 * User: Nikolay Chervyakov 
 * Date: 20.01.2015
 * Time: 12:55
 */

namespace VulnModule\Vulnerability;

use VulnModule\Vulnerability;

class IntegerOverflow extends Vulnerability
{
    const RETURN_CAST_TO_INT = 'cast_to_integer';
    const RETURN_ZERO = 'set_zero';
    const RETURN_NULL = 'set_null';
    const RETURN_CUSTOM = 'set_custom';

    const NOT_NUM_BYPASS = 'bypass';
    const NOT_NUM_FILTER = 'filter';

    protected $returnTransform = self::RETURN_CAST_TO_INT;

    protected $customValue = 0;

    protected $actionOnNotNumeric = self::NOT_NUM_BYPASS;

    /**
     * @return string
     */
    public function getReturnTransform()
    {
        return $this->returnTransform;
    }

    /**
     * @param string $returnTransform
     */
    public function setReturnTransform($returnTransform)
    {
        if ($returnTransform == 'coerce_to_integer') {
            $returnTransform = self::RETURN_CAST_TO_INT;
        }

        if (!in_array($returnTransform, self::getAllowedReturnTransforms())) {
            throw new \InvalidArgumentException("Transform type '$returnTransform' is not allowed. Allowed types are: "
                    . implode(', ', self::getAllowedReturnTransforms()));
        }
        $this->returnTransform = $returnTransform;
    }

    /**
     * @return mixed
     */
    public function getCustomValue()
    {
        return $this->customValue;
    }

    /**
     * @param mixed $customValue
     */
    public function setCustomValue($customValue)
    {
        $this->customValue = (int) $customValue;
    }

    /**
     * @return string
     */
    public function getActionOnNotNumeric()
    {
        return $this->actionOnNotNumeric;
    }

    /**
     * @param string $actionOnNotNumeric
     */
    public function setActionOnNotNumeric($actionOnNotNumeric)
    {
        $this->actionOnNotNumeric = $actionOnNotNumeric;
    }

    public function asArray()
    {
        return array_merge(parent::asArray(), [
            'transform_strategy' => $this->returnTransform,
            'custom_value' => $this->customValue,
            'action_on_not_numeric' => $this->actionOnNotNumeric
        ]);
    }

    public function fillFromArray($data)
    {
        parent::fillFromArray($data);

        if (!is_array($data)) {
            return;
        }

        if (array_key_exists('transform_strategy', $data)) {
            $this->setReturnTransform($data['transform_strategy']);
        }

        if (array_key_exists('custom_value', $data)) {
            $this->setCustomValue($data['custom_value']);
        }

        if (array_key_exists('action_on_not_numeric', $data)) {
            $this->setActionOnNotNumeric($data['action_on_not_numeric']);
        }
    }

    /**
     * @param Vulnerability|IntegerOverflow $vuln
     * @return bool
     */
    public function equalsTo($vuln)
    {
        if (!parent::equalsTo($vuln)) {
            return false;
        }

        return $this->getReturnTransform() === $vuln->getReturnTransform()
            && ($this->getReturnTransform() !== self::RETURN_CUSTOM || $this->getCustomValue() === $vuln->getCustomValue());
    }

    public static function getAllowedReturnTransforms()
    {
        return [
            self::RETURN_CAST_TO_INT,
            self::RETURN_ZERO,
            self::RETURN_NULL,
            self::RETURN_CUSTOM
        ];
    }

    public static function getReturnTransformsLabels()
    {
        return [
            self::RETURN_CAST_TO_INT => 'Cast to integer',
            self::RETURN_ZERO => 'Set 0',
            self::RETURN_NULL => 'Set null',
            self::RETURN_CUSTOM => 'Set custom value'
        ];
    }

    public static function getAllowedNotNumericActions()
    {
        return [
            self::NOT_NUM_BYPASS,
            self::NOT_NUM_FILTER
        ];
    }

    public static function getNotNumericActionsLabels()
    {
        return [
            self::NOT_NUM_BYPASS => 'Bypass',
            self::NOT_NUM_FILTER => 'Filter'
        ];
    }

    public function filter($value)
    {
        if ($this->isEnabled()) {
            return $value;
        }

        if (!is_numeric($value) && $this->actionOnNotNumeric == self::NOT_NUM_BYPASS) {
            return $value;
        }

        $isInt = ((int) $value) == $value;

        if ($isInt) {
            return (int) $value;
        }

        if ($this->getReturnTransform() == self::RETURN_CAST_TO_INT) {
            return (int) $value;

        } else if ($this->getReturnTransform() == self::RETURN_ZERO) {
            return 0;

        } else if ($this->getReturnTransform() == self::RETURN_CAST_TO_INT) {
            return null;

        } else {
            return (int) $this->customValue;
        }
    }

    public function overflows($value)
    {
        return !is_integer($value);
    }
}