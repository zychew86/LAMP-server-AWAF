<?php
/**
 * Created by IntelliJ IDEA.
 * User: Nikolay Chervyakov 
 * Date: 05.02.2015
 * Time: 16:40
 */


namespace VulnModule\Vulnerability;


use App\Exception\HttpException;
use VulnModule\Vulnerability;

class PHPSessionIdOverflow extends Vulnerability
{
    const ACTION_FIX = 'fix';
    const ACTION_EXCEPTION = 'exception';
    const ACTION_HTTP_EXCEPTION = 'http_exception';

    protected $actionOnCorruptedId = self::ACTION_FIX;

    /**
     * We only use this vulnerability on contexts, not fields.
     * @var array
     */
    protected static $targets = [
        self::TARGET_CONTEXT
    ];

    public function fixSession() {
        if ($this->isEnabled()) {
            return;
        }

        $sessionName = session_name();
        $arrays = [&$_GET, &$_POST, &$_COOKIE];
        foreach ($arrays as $k => $arr) {
            if (isset($arrays[$k][$sessionName]) && strlen($arrays[$k][$sessionName]) > 32) {
                switch ($this->actionOnCorruptedId) {
                    case self::ACTION_EXCEPTION:
                        throw new \Exception("Invalid session id");

                    case self::ACTION_HTTP_EXCEPTION:
                        unset($arrays[$k][$sessionName]);
                        throw new HttpException("Invalid session id. Recreated id.", 400, null, "Bad request");

                    default:
                        unset($arrays[$k][$sessionName]);
                }
            }
        }

        if (PHP_SESSION_NONE === session_status()) {
            session_start();
        }
    }

    /**
     * @return string
     */
    public function getActionOnCorruptedId()
    {
        return $this->actionOnCorruptedId;
    }

    /**
     * @param string $actionOnCorruptedId
     */
    public function setActionOnCorruptedId($actionOnCorruptedId)
    {
        $this->actionOnCorruptedId = $actionOnCorruptedId;
    }

    public function asArray()
    {
        return array_merge(parent::asArray(), [
            'on_corrupted_id' => $this->actionOnCorruptedId,
        ]);
    }

    public function fillFromArray($data)
    {
        parent::fillFromArray($data);

        if (!is_array($data)) {
            return;
        }

        if (array_key_exists('on_corrupted_id', $data)) {
            $this->setActionOnCorruptedId($data['on_corrupted_id']);
        }
    }

    /**
     * @param Vulnerability|PHPSessionIdOverflow $vuln
     * @return bool
     */
    public function equalsTo($vuln)
    {
        if (!parent::equalsTo($vuln)) {
            return false;
        }

        return $this->getActionOnCorruptedId() === $vuln->getActionOnCorruptedId();
    }

    /**
     * @return array
     */
    public static function getOnCorruptedActions()
    {
        return [
            self::ACTION_FIX,
            self::ACTION_EXCEPTION,
            self::ACTION_HTTP_EXCEPTION
        ];
    }

    /**
     * @return array
     */
    public static function getOnCorruptedActionsLabels()
    {
        return [
            self::ACTION_FIX => 'Fix the Session Id',
            self::ACTION_EXCEPTION => 'Throw an Exception',
            self::ACTION_HTTP_EXCEPTION => 'Throw Http Exception (400 Bad request)'
        ];
    }
}