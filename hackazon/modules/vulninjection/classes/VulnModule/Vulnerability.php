<?php
/**
 * Created by IntelliJ IDEA.
 * User: Nikolay Chervyakov 
 * Date: 26.11.2014
 * Time: 16:22
 */


namespace VulnModule;
use Symfony\Component\Validator\Mapping\ClassMetadata;

/**
 * Base of all vulnerabilities
 * @package VulnModule
 */
class Vulnerability
{
    const TARGET_CONTEXT = 'context';
    const TARGET_FIELD = 'field';

    /**
     * @var array
     */
    protected static $targets = [
        self::TARGET_CONTEXT,
        self::TARGET_FIELD
    ];

    /**
     * @var bool
     */
    private $enabled = true;

    function __construct($enabled = true)
    {
        $this->enabled = $enabled;
    }

    /**
     * @return boolean
     */
    public function isEnabled()
    {
        return $this->enabled;
    }

    /**
     * @param boolean $enabled
     */
    public function setEnabled($enabled)
    {
        $this->enabled = (boolean) $enabled;
    }

    public static function getClass()
    {
        return get_class(new static);
    }

    public static function getNameStatic()
    {
        return preg_replace('/.*\\\\/', '', static::getClass());
    }

    public function getName()
    {
        return preg_replace('/.*\\\\/', '', get_class($this));
    }

    /**
     * @return array Vulnerability parameters as array for serialization
     */
    public function asArray()
    {
        return [
            'name' => $this->getName(),
            'enabled' => $this->enabled
        ];
    }

    public static function loadValidatorMetadata(ClassMetadata $metadata)
    {
       // $metadata->addGetterConstraint('getName', new NotBlank());
    }

    /**
     * @param mixed|array $data
     */
    public function fillFromArray($data)
    {
        if (!is_array($data)) {
            $this->setEnabled(!!$data);
            return;
        }

        $this->setEnabled(!!$data['enabled']);
    }

    public function setName($name)
    {
    }

    /**
     * @param Vulnerability $vuln
     * @return bool
     */
    public function equalsTo($vuln)
    {
        if ($this === $vuln) {
            return true;
        }

        $className = __CLASS__;
        if (!($vuln instanceof $className)) {
            return false;
        }

        return $this->getName() == $vuln->getName()
            && $this->isEnabled() == $vuln->isEnabled();
    }

    /**
     * @param mixed $value
     * @return mixed
     */
    public function filter($value)
    {
        return $value;
    }

    public function escape($value, $flags = ENT_COMPAT, $encoding = 'UTF-8')
    {
        $val = $value instanceof VulnerableField ? $value->getFilteredValue() : $value;
        return $this->enabled ? $val : htmlspecialchars($val, $flags, $encoding);
    }

    /**
     * @param mixed|array $targets
     * @return bool
     */
    public static function isTargetedAt($targets)
    {
        if (is_array($targets)) {
            return count(array_intersect(static::$targets, $targets)) > 0;

        } else {
            return in_array($targets, static::$targets);
        }
    }

    public function getTargetsString()
    {
        return implode(',', static::$targets);
    }

    public function setTargetsString($ignored)
    {
    }
}