<?php
/**
 * Created by IntelliJ IDEA.
 * User: Nikolay Chervyakov 
 * Date: 03.12.2014
 * Time: 13:40
 */


namespace VulnModule;


use VulnModule\DataType\ArrayObject;

/**
 * Creates a vulnerabilities
 * @package VulnModule
 */
class VulnerabilityFactory
{
    protected $cache;

    protected function __construct()
    {
        $this->cache = new ArrayObject();
    }

    /**
     * Singleton instance
     * @return VulnerabilityFactory
     */
    public static function instance()
    {
        static $instance;

        if (!$instance) {
            $instance = new self();
        }

        return $instance;
    }

    /**
     * @param $name
     * @param bool $enabled
     * @return Vulnerability
     */
    public function create($name, $enabled = true)
    {
        $vuln = clone $this->getVulnerability($name);
        $vuln->setEnabled($enabled);
        return $vuln;
    }

    /**
     * @param $name
     * @return Vulnerability
     */
    protected function getVulnerability($name) {
        if (!array_key_exists($name, $this->cache)) {
            $className = __NAMESPACE__ . '\\Vulnerability\\' . $name;
            if (!class_exists($className)) {
                throw new \InvalidArgumentException("Class '$name' doesn't exist.");
            }

            $vulnerability = new $className;
            if (!($vulnerability instanceof Vulnerability)) {
                throw new \RuntimeException("Class '$name' is not a Vulnerability class.'");
            }

            $this->cache[$name] = $vulnerability;
        }

        return $this->cache[$name];
    }

    /**
     * @return array
     */
    public static function getAllVulnerabilityNames()
    {
        static $names;
        if (!$names) {
            $names = [];
            foreach (new \DirectoryIterator(__DIR__ . '/Vulnerability') as $fileInfo) {
                if ($fileInfo->isDir() || $fileInfo->getExtension() != 'php' || !$fileInfo->isReadable()) {
                    continue;
                }
                $names[] = basename($fileInfo->getFilename(), '.php');
            }
        }

        return $names;
    }

    public static function exists($name)
    {
        return in_array($name, self::getAllVulnerabilityNames());
    }
}