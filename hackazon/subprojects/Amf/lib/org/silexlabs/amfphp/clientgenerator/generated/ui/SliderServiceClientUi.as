package org.silexlabs.amfphp.clientgenerator.generated.ui{	import fla.Label;	import fla.Button;	import fla.TextInput;	import fla.TextResultDisplay;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.net.NetConnection;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;		import org.silexlabs.amfphp.clientgenerator.generated.service.SliderServiceClient;	import org.silexlabs.amfphp.clientgenerator.NetConnectionSingleton;	import org.silexlabs.amfphp.clientgenerator.ObjectUtil;	import org.silexlabs.amfphp.clientgenerator.ui.elements.IDataIoGui;	import org.silexlabs.amfphp.clientgenerator.ui.elements.ILabel;	import org.silexlabs.amfphp.clientgenerator.generated.service.SliderServiceClient;
		public class SliderServiceClientUi extends MovieClip	{		/**		 * layout constants		 * */		private static const PADDING:int = 20;		private static const METHOD_UI_HEIGHT:int = 40;		private static const METHOD_INPUT_WIDTH:int = 120;		private static const CALL_BUTTON_X:int = 400;				private var _service:SliderServiceClient;						//getSlides inputs 		public var getSlides_num_Input:IDataIoGui; 		public var getSlidesLabel:ILabel;		public var getSlides_callButton:ILabel;				public var resultDisplay:IDataIoGui;		public function SliderServiceClientUi()		{			super();			var xLayoutMultiplier:int = 0;			var yLayoutMultiplier:int = 0;			var maxNumMethodInputs:int = 0;						_service = new SliderServiceClient(NetConnectionSingleton.getNetConnection());			graphics.beginFill(0, 0.3);						//getSlides ui			xLayoutMultiplier = 0;			if(!getSlidesLabel){				getSlidesLabel = new Label();				getSlidesLabel.label = 'getSlides method';				getSlidesLabel.displayObject.x = PADDING;				getSlidesLabel.displayObject.y = PADDING + METHOD_UI_HEIGHT * yLayoutMultiplier;				addChild(getSlidesLabel.displayObject);							}									if(!getSlides_num_Input){				getSlides_num_Input = new TextInput();				getSlides_num_Input.displayObject.x = PADDING + METHOD_INPUT_WIDTH * xLayoutMultiplier;				getSlides_num_Input.displayObject.y = PADDING + getSlidesLabel.displayObject.height  + METHOD_UI_HEIGHT * yLayoutMultiplier;				addChild(getSlides_num_Input.displayObject);							}			xLayoutMultiplier++;									if(!getSlides_callButton){				getSlides_callButton = new Button();				getSlides_callButton.label = "call";				getSlides_callButton.displayObject.x = PADDING + METHOD_INPUT_WIDTH * xLayoutMultiplier;				getSlides_callButton.displayObject.y = PADDING + getSlidesLabel.displayObject.height  + METHOD_UI_HEIGHT * yLayoutMultiplier;				addChild(getSlides_callButton.displayObject);			}			getSlides_callButton.addEventListener(MouseEvent.CLICK, getSlides_callButtonClickHandler);			yLayoutMultiplier++;						if(!resultDisplay){				resultDisplay = new TextResultDisplay();				resultDisplay.displayObject.y = 2 * PADDING + METHOD_UI_HEIGHT * yLayoutMultiplier;				addChild(resultDisplay.displayObject);			}					}	  								private function getSlides_callButtonClickHandler(event:MouseEvent):void{			_service.getSlides(getSlides_num_Input.data).setResultHandler(getSlidesResultHandler).setErrorHandler(errorHandler); 		}		private function getSlidesResultHandler(obj:Object):void{			resultDisplay.data = "result : \n" + obj + '\n' + ObjectUtil.deepObjectToString(obj) + "\n";		}						private function errorHandler(obj:Object):void{			resultDisplay.data = "error :  \n" +  ObjectUtil.deepObjectToString(obj) + "\n";		}	}}