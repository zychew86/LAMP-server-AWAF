<?php
/**
 * Created by IntelliJ IDEA.
 * User: Nikolay Chervyakov 
 * Date: 17.12.2014
 * Time: 16:00
 */


namespace App\Admin\Controller;


use App\Admin\Controller;
use App\Admin\Form\ContextType;
use App\Core\Request;
use App\Exception\HttpException;
use App\Exception\NotFoundException;
use Symfony\Bundle\FrameworkBundle\Templating\PhpEngine;
use Symfony\Component\Form\FormError;
use VulnModule\Config\Condition;
use VulnModule\Config\ConditionalVulnerableElement;
use VulnModule\Config\ConditionFactory;
use VulnModule\Config\ConditionSet;
use VulnModule\Config\Context;
use VulnModule\Config\Field;
use VulnModule\Storage\PHPFileReader;
use VulnModule\Storage\PHPFileWriter;
use VulnModule\Vulnerability as V;
use VulnModule\VulnerabilityFactory;
use VulnModule\VulnerabilityMatrixRenderer;
use VulnModule\VulnerabilitySet;

/**
 * Class Vulnerability
 * @package App\Admin\Controller
 */
class Vulnerability extends Controller
{
    protected $isConfigDirWritable = false;

    public function before()
    {
        parent::before();
        if (!$this->execute) {
            return;
        }

        $this->isConfigDirWritable = is_writable($this->vulnConfigDir);
    }

    public function action_index()
    {
        $contextName = $this->request->get('context');
        $editModeEnabled = (boolean) $this->request->get('edit');

        $reader = new PHPFileReader($this->vulnConfigDir);

        $contextNames = $reader->getOwnContextNames();
        $originalContextNames = $reader->getReferenceContextNames();

        $allContextNames = $reader->getAllContextNames();

        $restorableContext = $contextName && in_array($contextName, $contextNames) && in_array($contextName, $originalContextNames);

        if ($contextName && !in_array($contextName, $allContextNames)) {
            throw new NotFoundException("The config '$contextName' does not exist.");
        }

        $paramsStr = http_build_query(array_diff_key($this->request->get(), ['admin/vulnerability' => '']));
        $actionUrl = '/admin/vulnerability' . ($paramsStr ? '?'.$paramsStr : '');
        $templatesHtml = '';
        $permissionError = '';
        /** @var PhpEngine $templating */
        $templating = $this->pixie->container['templating'];


        if ($contextName) {
            if (!$this->isConfigDirWritable) {
                 $permissionError = "The config directory is not writable and you cannot save the configs. To be able "
                    . "to modify configs please modify the permissions to the config directory: " . realpath($this->vulnConfigDir);
            }

            $configName = $this->vulnConfigDir . '/' . $contextName.'.php';
            if (file_exists($configName) && !is_writable($configName)) {
                $sampleConfigName = $this->vulnConfigDir . '/../vuln.sample/' . $contextName.'.php';
                if (!(file_exists($sampleConfigName) && is_writable($sampleConfigName))) {
                    $permissionError = "The config file is not writable and you cannot save the config. To be able "
                        . "to save config please modify the permissions to the config file: " . realpath($configName);
                    $this->isConfigDirWritable = false;
                }
            }

            if ($this->request->method == Request::METHOD_POST) {
                if (!$this->isConfigDirWritable) {
                    throw new HttpException("Config directory is not writable: " . $this->vulnConfigDir);
                }

                $form = $this->buildContextForm(new Context($contextName), $actionUrl, $editModeEnabled);
                $post = $this->request->post();

                try {
                    $form->submit($post['context_form']);

                } catch (\Exception $e) {
                    $form->addError(new FormError($e->getMessage()));
                }

                if ($form->isValid()) {
                    $context = $form->getData();
                    $context = $context['context'];
                    /** @var Context $context */
                    $context->setStorageRole(Context::STORAGE_ROLE_ROOT);

                    $writer = new PHPFileWriter($this->pixie, $this->vulnConfigDir);
                    $writer->write($context);

                    $this->pixie->session->flash('message', 'The config "' . $context->getName() . '" has been saved.');

                    $this->redirect($actionUrl);
                    return null;
                }

            } else {
                $context = $reader->read($contextName);

                $form = $this->buildContextForm($context, $actionUrl, $editModeEnabled);
            }

            $formView = $form->createView();
            $formHtml = $templating->render('context_form', ['form' => $formView]);
            $templatesHtml = $this->renderTemplates();

        } else {
            $formHtml = '';
        }
        $this->view->restorableContext = $restorableContext;
        $this->view->contextNames = $allContextNames;
        $this->view->contextName = $contextName;
        $this->view->editModeEnabled = $editModeEnabled;
        $this->view->templating = $templating;
        $this->view->form = $formHtml;
        $this->view->subview = 'vulnerability/index';
        $this->view->pageHeader = "Vulnerability Injection Configuration";
        $this->view->pageTitle = $this->view->pageHeader . ($contextName ? ' - ' . $contextName : '');
        $this->view->headCSS = '<link href="/js/jqueryui-sortable/jquery-ui.css" rel="stylesheet" />';
        $this->view->headScripts = '<script type="text/javascript" charset="utf-8" src="/js/can.custom.min.js"></script>';
        $this->view->headScripts .= '<script type="text/javascript" charset="utf-8" src="/js/jqueryui-sortable/jquery-ui.min.js"></script>';
        $this->view->headScripts .= "<script type='application/javascript' src='/js/vuln-config.js'></script>";
        $this->view->permissionError = $permissionError ?: '';
        $this->view->configDir = realpath($this->vulnConfigDir);
        $this->view->templatesHtml = $templatesHtml;
        $this->view->flash = $this->pixie->session->flash('message') ?: '';

        return $this->view->render();
    }

    public function action_matrix()
    {
        $reader = new PHPFileReader($this->vulnConfigDir);

        $matrixRenderer = new VulnerabilityMatrixRenderer($reader);
        $matrix = $matrixRenderer->render();

        $this->view->matrix = $matrix['html'];
        $this->view->pageHeader = "Vulnerability Matrix";
        $this->view->subview = 'vulnerability/matrix2';
    }

    public function action_restore()
    {
        $contextName = $this->request->post('context');

        $reader = new PHPFileReader($this->vulnConfigDir);
        $contextNames = $reader->getOwnContextNames();
        $originalContextNames = $reader->getReferenceContextNames();

        if (!$contextName || !in_array($contextName, $contextNames) || !in_array($contextName, $originalContextNames)) {
            throw new HttpException("Incorrect context name.");
        }

        $targetFile = $this->vulnConfigDir . '/' . $contextName . '.php';

        if (in_array($contextName, $contextNames)) {
            unlink($targetFile);
        }

        copy($this->vulnConfigDir . '/../vuln.sample/' . $contextName . '.php', $targetFile);

        $this->pixie->session->flash('message',
            'The config "' . $contextName . '" has been successfully restored to its original content.');
        $this->redirect('/admin/vulnerability?context=' . rawurlencode($contextName));
    }

    protected function buildContextForm(Context $context, $actionUrl, $editModeEnabled = false, $contextName = 'context')
    {
        return $this->getFormFactory()->createBuilder(new ContextType(), [$contextName => $context], [
            'action' => $actionUrl,
            'method' => 'POST',
            'edit_mode_enabled' => $editModeEnabled,
            'context_name' => $contextName,
            'is_config_dir_writable' => $this->isConfigDirWritable
        ])->getForm();
    }

    protected function buildAllVulnerabilitiesForm()
    {
        $allVulnsSet = new VulnerabilitySet();
        $vulns = VulnerabilityFactory::instance()->getAllVulnerabilityNames();

        foreach ($vulns as $vulnName) {
            $vulnType = 'VulnModule\\Vulnerability\\' . $vulnName;
            if (class_exists($vulnType)) {
                $vuln = new $vulnType;
            } else {
                $vuln = new V();
            }

            $allVulnsSet->set($vuln);
        }

        $vulnBuilder = $this->getFormFactory()->createBuilder('form', [
            '__ALL_VULNS__' => $allVulnsSet,
        ])->add('__ALL_VULNS__', 'vulnerability_set');

        return $vulnBuilder->getForm();
    }

    protected function buildAllConditionsForm()
    {
        $allConditionsSet = new ConditionSet();
        $conditionNames = ConditionFactory::instance()->getAllConditionNames();

        foreach ($conditionNames as $name) {
            $conditionClass = 'VulnModule\\Config\\Condition\\' . $name;
            if (class_exists($conditionClass)) {
                $condition = new $conditionClass;
            } else {
                $condition = new Condition();
            }

            if (!$condition::IS_ACTIVE) {
                continue;
            }
            $allConditionsSet->addCondition($condition);
        }

        $vulnBuilder = $this->getFormFactory()->createBuilder('form', [
            '__ALL_CONDITIONS__' => $allConditionsSet
        ])->add('__ALL_CONDITIONS__', 'condition_set');

        return $vulnBuilder->getForm();
    }

    protected function buildFieldForm()
    {
        $field = new Field();
        $builder = $this->getFormFactory()->createBuilder('form', [
            '__FIELD__' => $field
        ], [
            'action' => '',
            'method' => 'POST',
        ]);

        $builder->add('__FIELD__', 'field', [
            'edit_mode_enabled' => true
        ]);

        return $builder->getForm();
    }

    protected function buildVulnElementForm()
    {
        $builder = $this->getFormFactory()->createBuilder('form', [
            '__VULN_ELEMENT__' => new ConditionalVulnerableElement()
        ], [
            'action' => '',
            'method' => 'POST',
        ]);

        $builder->add('__VULN_ELEMENT__', 'conditional_vulnerable_element', [
            'edit_mode_enabled' => true
        ]);

        return $builder->getForm();
    }

    protected function renderTemplates() {

        $result = '';

        $templates = [];

        /** @var PhpEngine $templating */
        $templating = $this->pixie->container['templating'];

        $allVulnsFormView = $this->buildAllVulnerabilitiesForm()->createView();
        $allVulnsFormHtml = $templating->render('all_types', [
            'form' => $allVulnsFormView['__ALL_VULNS__']
        ]);

        $result .= $allVulnsFormHtml;

        $allConditionsFormView = $this->buildAllConditionsForm()->createView();
        $allConditionsFormHtml = $templating->render('all_conditions', [
            'form' => $allConditionsFormView['__ALL_CONDITIONS__']
        ]);

        $result .= $allConditionsFormHtml;

        $contextTplFormView = $this->buildContextForm(new Context(), '', true, '__CONTEXT__')->createView();
        $contextTplFormHtml = $templating->render('context_widget', [
            'form' => $contextTplFormView['__CONTEXT__']
        ]);

        $contextTplFormHtml = str_replace(
            ['context_form___CONTEXT__', 'context_form[__CONTEXT__]', '__CONTEXT__'],
            ['{{ id }}', '{{ name }}', '{{ field_index }}'],
            $contextTplFormHtml);

        $templates[] = [
            'html' => $contextTplFormHtml,
            'id' => 'tplContext',
            'class' => 'js-template'
        ];

        $fieldTplFormView = $this->buildFieldForm()->createView();
        $fieldTplFormHtml = $templating->render('field_row', [
            'form' => $fieldTplFormView['__FIELD__']
        ]);

        $fieldTplFormHtml = str_replace(
            ['form___FIELD__', 'form[__FIELD__]', '__FIELD__'],
            ['{{ id }}', '{{ name }}', '{{ field_index }}'],
            $fieldTplFormHtml);

        $templates[] = [
            'html' => $fieldTplFormHtml,
            'id' => 'tplField',
            'class' => 'js-template'
        ];

        $vulnElementTplFormView = $this->buildVulnElementForm()->createView();
        $vulnElementTplFormHtml = $templating->render('conditional_vulnerable_element_row', [
            'form' => $vulnElementTplFormView['__VULN_ELEMENT__']
        ]);

        $vulnElementTplFormHtml = str_replace(
            ['form___VULN_ELEMENT__', 'form[__VULN_ELEMENT__]', '__VULN_ELEMENT__'],
            ['{{ id }}', '{{name }}', '{{ field_index }}'],
            $vulnElementTplFormHtml);

        $templates[] = [
            'html' => $vulnElementTplFormHtml,
            'id' => 'tplVulnerableElement',
            'class' => 'js-template'
        ];

        foreach ($templates as $tpl) {
            $result .= "<script type=\"text/x-handlebars\" charset=\"utf-8\" id=\"" . $tpl['id'] . "\" "
                    . "class=\"" . $tpl['class'] . "\">" . $tpl['html'] . "</script>\n";
        }

        return $result;
    }
}